{
    trigger { linkages { rules {}}}

    == RULE ==
        TYPE: 
            * EventEquality: does an event name, and or body match a pattern
            * linkagesEquality: does a _var[] property match a pattern
            * triggerEquality: does a specific trigger match a pattern
            * objectExists: does a specific JS object exist in memory?

        STATES: 
            * idle: intial state
            * pending: an async evaluation is underway
            * satisfied: evaluation is complete and satisfies the condition

        METHODS:
            * prime()^: Called automatically on init(), makes registrations, sets variables and counters, 
                * EventEquality: subscribe to _evChannel for _evName and call evaluate()
                * linkagesEquality: create
                * triggerEquality: does a specific trigger match a pattern
                * objectExists: does a specific JS object exist in memory?
            * evaluate()^: 
                * EventEquality: _evName == ev.name && ev.data === _evExactMatch || {_variables contained match _evContians }
                * linkagesEquality: does a _var[] property match a pattern
                * triggerEquality: does a specific trigger match a pattern
                * objectExists: does a specific JS object exist in memory?
            * reset()^: Called to reset the trigger to the unprimed state. 

        MODIFIERS:
            * clearCustomVarsOnReset
            * clearInternalVarsOnReset
   
        INTERNAL VARIABLES:
            * count / increment(x)
            * average, sum
            * max
            * min
        
        EVENTS:
            * primed
            * reset
            * fired
            * evaluated
            * consumed?

    'channels' : [], //Object // Obj Dom // Global // Global DOM

    == LINKAGE == 
        TYPE: 
            * linear: each rule is evaluated after the prior has been passed
            * parallel: 
        LOGICAL GROUP:
            * AND: success after all rules are satisfied
            * OR: success after the first rule is satisfied
        TIMING: 
            * delay: a timer is started; when complete, evaluation is called. 
            * window: evalutation is started and then checked at the end of the time window 
        STATE: 
            * satisfied: T/F returned by evaluate()
        MODIFIERS:
            * stickyRules
            * resetWithTrigger
    
    == TRIGGER == 
        STATE: 
            * unprimed
            * primed 
            * fired 
        MODIFIERS:
            * resetWithTrigger
            * keepAlive
			* resetAfterFire
}